/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import {precacheAndRoute, createHandlerBoundToURL, precache} from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import {CacheFirst, StaleWhileRevalidate} from 'workbox-strategies';
import { offlineFallback } from 'workbox-recipes';
import settings from "./settings";
import {MatchCallback} from "workbox-routing/_types";


declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

//TODO: POST Requests gehen leider nicht in den Cache -> verboten...
/*
const matchArtistinfo:MatchCallback = ({url, request, event}) => {
	return url.origin === settings.REST_API_URL && url.pathname.startsWith('/js-api/mischungxl/artistinfo');
};
registerRoute(matchArtistinfo,new StaleWhileRevalidate({cacheName:"artist_info"}),'POST');
*/

const matchArtistImages:MatchCallback = ({url, request, event}) => {
	return url.origin === settings.REST_API_URL && url.pathname.startsWith("/artist/");
};
registerRoute(matchArtistImages,new StaleWhileRevalidate({cacheName:"artist_images"}),'GET');

const matchSets:MatchCallback = ({url, request, event}) => {
	return url.origin === settings.REST_API_URL && url.pathname.startsWith("/js-api/mischungxl");
};
registerRoute(matchSets,new StaleWhileRevalidate({cacheName:"sets"}),'GET');

//TODO: POST Requests gehen leider nicht in den Cache -> verboten...
/*
const matchGetFilters:MatchCallback = ({url, request, event}) => {
	return url.origin === settings.REST_API_URL && url.pathname.startsWith("/js-api/mischungxl/getfilters");
};
registerRoute(matchGetFilters,new StaleWhileRevalidate({cacheName:"sets"}),'POST');
*/

registerRoute(({request}) => request.destination === 'image',
	new CacheFirst({
		cacheName: 'images',
		plugins: [
			new ExpirationPlugin({
				maxEntries: 60,
				maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
			}),
		],
	})
);


// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
	// Return false to exempt requests from being fulfilled by index.html.
	({ request, url }: { request: Request; url: URL }) => {
		// If this isn't a navigation, skip.
		if (request.mode !== 'navigate') {
			return false;
		}

		// If this is a URL that starts with /_, skip.
		if (url.pathname.startsWith('/_')) {
			return false;
		}

		// If this looks like a URL for a resource, because it contains
		// a file extension, skip.
		if (url.pathname.match(fileExtensionRegexp)) {
			return false;
		}

		// Return true to signal that we want to use the handler.
		return true;
	},
	createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);



// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
	if (event.data && event.data.type === 'SKIP_WAITING') {
		self.skipWaiting();
	}
});
